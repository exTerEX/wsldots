#!/usr/bin/env bash

# Let script exit when a command fail
set -o errexit

# Let script exit if an unset variable is used
set -o nounset

# Make folders
if [[ ! -d ~/.config ]]; then
  mkdir ~/.config
fi

# Link .config files
if [[ ! -h ~/.config/.bash_aliases ]]; then
  sudo ln -sf ~/.dotfiles/.bash_aliases ~/.config/.bash_aliases
fi

if [[ ! -h ~/.config/.bash_functions ]]; then
  sudo ln -sf ~/.dotfiles/.bash_functions ~/.config/.bash_functions
fi

# Link .bashrc
if [[ ! -h ~/.bashrc ]]; then
  sudo ln -sf ~/.dotfiles/.bashrc ~/.bashrc
fi

# Update packages
sudo apt update

# Install C/C++ compiler
sudo apt -y install --no-install-recommends build-essential

# Install python
sudo apt -y install --no-install-recommends python3 python3-pip python3-dev python3-venv pipenv

# Python alias / definitions
sudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3 1
sudo update-alternatives --install /usr/local/bin/python3 python3 /usr/bin/python3 1

# Install golang
sudo apt -y install --no-install-recommends golang

# Running under WSL (Windows Subsystem for Linux)
if cat /proc/version | grep -q microsoft; then
  echo "Running in WSL mode..."
  WSL=true
else
  echo "Running in normal mode..."
  WSL=false
fi

# Get Windows username
if $WSL; then
  echo "Finding Windows username..."
  WINDOWS_USER=$(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe '$env:UserName' | sed -e 's/\r//g')
fi

# Define USERPATH running WSL mode
if $WSL; then
  echo "Windows 10 %USERPROFILE%..."
  USERPATH=/mnt/c/Users/$WINDOWS_USER
fi

# Use Windows .gitconfig if possible else use repo version
if $WSL; then
  if [[ -e $USERPATH/.gitconfig ]]; then
    echo "Using Windows .gitconfig file..."
    sudo ln -sf $USERPATH/.gitconfig ~/
  else
    echo "Using repo .gitconfig file..."
    sudo ln -sf ~/.dotfiles/.gitconfig ~/
  fi
else
  if [[ ! -e ~/.gitconfig ]]; then
    echo "Using repo .gitconfig file..."
    sudo ln -sf ~/.dotfiles/.gitconfig ~/
  fi
fi

# Use Windows .ssh key and known_hosts if possible
if $WSL; then
  if [[ ! -e ~/.ssh ]]; then
    echo "Copying .ssh files to .ssh/..."
    cp -r $USERPATH/.ssh ~/
  fi

  sudo chmod 600 ~/.ssh/*

  if [[ ! -h ~/.ssh/known_hosts ]]; then
    echo "Creating symlink to known_hosts..."
    sudo ln -sf $USERPATH/.ssh/known_hosts ~/.ssh/known_hosts
  fi
fi

# Update image
sudo apt full-upgrade

##### FROM: Oh-My-Bash installer.sh #####

# Copyright 2017-2020 Toan Nguyen and contributors (https://github.com/ohmybash/oh-my-bash/graphs/contributors)

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

main() {
  # Use colors, but only if connected to a terminal, and that terminal
  # supports them.
  if which tput >/dev/null 2>&1; then
      ncolors=$(tput colors)
  fi
  if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    BOLD="$(tput bold)"
    NORMAL="$(tput sgr0)"
  else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    BOLD=""
    NORMAL=""
  fi

  # Only enable exit-on-error after the non-critical colorization stuff,
  # which may fail on systems lacking tput or terminfo
  set -e

  # Checks the minium version of bash (v4) installed,
  # stops the installation if check fails
  if [ -n $BASH_VERSION ]; then
     bash_major_version=$(echo $BASH_VERSION | cut -d '.' -f 1)
     if [ "${bash_major_version}" -lt "4" ]; then
        printf "Error: Bash 4 required for Oh My Bash.\n"
        printf "Error: Upgrade Bash and try again.\n"
        exit 1
     fi
  fi

  if [ ! -n "$OSH" ]; then
    OSH=$HOME/.oh-my-bash
  fi

  if [ -d "$OSH" ]; then
    printf "${YELLOW}You already have Oh My Bash installed.${NORMAL}\n"
    printf "You'll need to remove $OSH if you want to re-install.\n"
    exit
  fi

  # Prevent the cloned repository from having insecure permissions. Failing to do
  # so causes compinit() calls to fail with "command not found: compdef" errors
  # for users with insecure umasks (e.g., "002", allowing group writability). Note
  # that this will be ignored under Cygwin by default, as Windows ACLs take
  # precedence over umasks except for filesystems mounted with option "noacl".
  umask g-w,o-w

  printf "${BLUE}Cloning Oh My Bash...${NORMAL}\n"
  hash git >/dev/null 2>&1 || {
    echo "Error: git is not installed"
    exit 1
  }
  # The Windows (MSYS) Git is not compatible with normal use on cygwin
  if [ "$OSTYPE" = cygwin ]; then
    if git --version | grep msysgit > /dev/null; then
      echo "Error: Windows/MSYS Git is not supported on Cygwin"
      echo "Error: Make sure the Cygwin git package is installed and is first on the path"
      exit 1
    fi
  fi
  env git clone --depth=1 https://github.com/ohmybash/oh-my-bash.git $OSH || {
    printf "Error: git clone of oh-my-bash repo failed\n"
    exit 1
  }

  printf "${BLUE}Looking for an existing bash config...${NORMAL}\n"
  if [ -f $HOME/.bashrc ] || [ -h $HOME/.bashrc ]; then
    printf "${YELLOW}Found ~/.bashrc.${NORMAL} ${GREEN}Backing up to ~/.bashrc.pre-oh-my-bash${NORMAL}\n";
    mv $HOME/.bashrc $HOME/.bashrc.pre-oh-my-bash;
  fi

  printf "${BLUE}Using the Oh My Bash template file and adding it to ~/.bashrc${NORMAL}\n"
  cp $OSH/templates/bashrc.osh-template $HOME/.bashrc
  sed "/^export OSH=/ c\\
export OSH=$OSH
  " $HOME/.bashrc > $HOME/.bashrc-ombtemp
  mv -f $HOME/.bashrc-ombtemp $HOME/.bashrc

  # MOTD message :)
  printf '%s' "$GREEN"
  printf '%s\n' '         __                          __               __  '
  printf '%s\n' '  ____  / /_     ____ ___  __  __   / /_  ____ ______/ /_ '
  printf '%s\n' ' / __ \/ __ \   / __ `__ \/ / / /  / __ \/ __ `/ ___/ __ \'
  printf '%s\n' '/ /_/ / / / /  / / / / / / /_/ /  / /_/ / /_/ (__  ) / / /'
  printf '%s\n' '\____/_/ /_/  /_/ /_/ /_/\__, /  /_.___/\__,_/____/_/ /_/ '
  printf '%s\n' '                        /____/                            .... is now installed!'
  printf "%s\n" "Please look over the ~/.bashrc file to select plugins, themes, and options"
  printf "${BLUE}${BOLD}%s${NORMAL}\n" "To keep up on the latest news and updates, follow us on GitHub: https://github.com/ohmybash/oh-my-bash"
  exec bash; source $HOME/.bashrc
}

main

##### END #####

# Clean
sudo apt -y autoremove
if [[ -d /var/lib/apt/lists ]]; then
  echo "Removing package list..."
  sudo rm -rf /var/lib/apt/lists/*
fi
sudo apt -y clean
