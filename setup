#!/usr/bin/env bash

# Let script exit when a command fail
set -o errexit

# Let script exit if an unset variable is used
set -o nounset

# Make folders
if [[ ! -d ~/.config ]]; then
  mkdir ~/.config
fi

# Link .config files
if [[ ! -h ~/.config/.bash_aliases ]]; then
  sudo ln -sf ~/.dotfiles/.bash_aliases ~/.config/.bash_aliases
fi

if [[ ! -h ~/.config/.bash_functions ]]; then
  sudo ln -sf ~/.dotfiles/.bash_functions ~/.config/.bash_functions
fi

# Link .bashrc
if [[ ! -h ~/.bashrc ]]; then
  sudo ln -sf ~/.dotfiles/.bashrc ~/.bashrc
fi

# Update packages
sudo apt-get -q=2 update
sudo apt-get -q=2 full-upgrade

# Running under WSL (Windows Subsystem for Linux)
if cat /proc/version | grep -q microsoft; then
  echo "Running in WSL mode..."
  WSL=true
else
  echo "Running in normal mode..."
  WSL=false
fi

# Get Windows username
if $WSL; then
  echo "Finding Windows username..."
  WINDOWS_USER=$(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe '$env:UserName' | sed -e 's/\r//g')
fi

# Define USERPATH running WSL mode
if $WSL; then
  echo "Windows 10 %USERPROFILE%..."
  USERPATH=/mnt/c/Users/$WINDOWS_USER
fi

# Use Windows .gitconfig if possible else use repo version
if $WSL; then
  if [[ -e $USERPATH/.gitconfig ]]; then
    echo "Using Windows .gitconfig file..."
    sudo ln -sf $USERPATH/.gitconfig ~/
  else
    echo "Using repo .gitconfig file..."
    sudo ln -sf ~/.dotfiles/.gitconfig ~/
  fi
else
  if [[ ! -e ~/.gitconfig ]]; then
    echo "Using repo .gitconfig file..."
    sudo ln -sf ~/.dotfiles/.gitconfig ~/
  fi
fi

# Use Windows .ssh key and known_hosts if possible
if $WSL; then
  if [[ ! -e ~/.ssh ]]; then
    echo "Copying .ssh files to .ssh/..."
    cp -r $USERPATH/.ssh ~/
  fi

  if [[ ! -h ~/.ssh/known_hosts ]]; then
    echo "Creating symlink to known_hosts..."
    sudo ln -sf $USERPATH/.ssh/known_hosts ~/.ssh/known_hosts
  fi
fi

sudo chmod -R 600 ~/.ssh/id_rsa
sudo chmod -R 600 ~/.ssh/id_rsa.pub

# Install python
sudo apt-get -y install --no-install-recommends python3 python3-pip pipenv

sudo update-alternatives --install /usr/local/bin/python python /usr/bin/python3 1
sudo update-alternatives --install /usr/local/bin/pip pip /usr/bin/pip3 1

# Install golang
sudo apt-get -y install --no-install-recommends golang

# Clean
sudo apt-get -y autoremove
if [[ -d /var/lib/apt/lists ]]; then
  echo "Removing package list..."
  sudo rm -rf /var/lib/apt/lists/*
fi
sudo apt-get -y clean
